generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  superadmin
  guru
  bk
  siswa
  orangtua
}

enum Gender {
  L
  P
}

enum JenisPelanggaran {
  kedisiplinan
  akademik
  lainnya
}

enum KategoriPelanggaran {
  ringan
  sedang
  berat
}

enum KategoriPrestasi {
  akademik
  non_akademik
  olahraga
  kesenian
  lainnya
}

enum StatusAngkatan {
  aktif
  lulus
}

enum TipeReport {
  violation
  achievement
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)

  student        Student?
  teacher        Teacher?
  orangTua       OrangTua?
  studentReports StudentReport[] @relation("ReportReporter")
}

model Student {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int       @unique
  nisn        String    @unique
  gender      Gender
  tempatLahir String
  tglLahir    DateTime
  alamat      String
  noHp        String?
  totalScore  Int       @default(0)
  isArchived  Boolean   @default(false)
  archivedAt  DateTime?

  classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId Int
  angkatan    Angkatan  @relation(fields: [angkatanId], references: [id])
  angkatanId  Int
  orangTua    OrangTua? @relation(fields: [orangTuaId], references: [id])
  orangTuaId  Int?

  reports       StudentReport[]
  notifications Notification[]
}

model Teacher {
  id     Int     @id @default(autoincrement())
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int     @unique
  nip    String  @unique
  noHp   String?
  alamat String?

  classrooms Classroom[] @relation("WaliKelas")
}

model OrangTua {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int     @unique
  noHp      String?
  alamat    String?
  pekerjaan String?

  children Student[]
}

model Classroom {
  id          Int      @id @default(autoincrement())
  kodeKelas   String   @unique
  namaKelas   String
  jmlSiswa    Int      @default(0)
  waliKelas   Teacher? @relation("WaliKelas", fields: [waliKelasId], references: [id])
  waliKelasId Int?     @unique // Setiap guru hanya bisa menjadi wali kelas untuk satu kelas

  students Student[]
}

model Angkatan {
  id     Int            @id @default(autoincrement())
  tahun  String         @unique
  status StatusAngkatan @default(aktif)

  students Student[]
}

model Violation {
  id        Int                 @id @default(autoincrement())
  nama      String
  kategori  KategoriPelanggaran
  jenis     JenisPelanggaran
  point     Int
  isActive  Boolean             @default(true)
  createdAt DateTime            @default(now())

  reports StudentReport[] @relation("ViolationReports")
}

model Achievement {
  id        Int              @id @default(autoincrement())
  nama      String
  kategori  KategoriPrestasi
  point     Int
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now())

  reports StudentReport[] @relation("AchievementReports")
}

model StudentReport {
  id         Int        @id @default(autoincrement())
  student    Student    @relation(fields: [studentId], references: [id])
  studentId  Int
  reporter   User       @relation("ReportReporter", fields: [reporterId], references: [id])
  reporterId Int
  tipe       TipeReport

  // Relasi conditional berdasarkan tipe
  violation     Violation?   @relation("ViolationReports", fields: [violationId], references: [id])
  violationId   Int?
  achievement   Achievement? @relation("AchievementReports", fields: [achievementId], references: [id])
  achievementId Int?

  tanggal   DateTime  @default(now())
  waktu     DateTime? // waktu kejadian jika berbeda
  deskripsi String?
  bukti     String?
  pointSaat Int // point saat pelanggaran/prestasi terjadi
  createdAt DateTime  @default(now())

  // Relasi ke penanganan (hanya untuk violation)
  penanganan Penanganan?
}

model TindakanOtomatis {
  id           Int     @id @default(autoincrement())
  minPoint     Int // minimal point untuk trigger
  maxPoint     Int? // maksimal point (opsional)
  namaTindakan String // SP1, Panggil Ortu, Drop Out
  deskripsi    String
  isActive     Boolean @default(true)

  penanganan Penanganan[]
}

model Penanganan {
  id                 Int               @id @default(autoincrement())
  studentReport      StudentReport?    @relation(fields: [studentReportId], references: [id])
  studentReportId    Int?              @unique
  tindakanOtomatis   TindakanOtomatis? @relation(fields: [tindakanOtomatisId], references: [id])
  tindakanOtomatisId Int?

  jenisPenanganan   String
  deskripsi         String
  tanggalPenanganan DateTime @default(now())
  penanggungJawab   String
  statusSelesai     Boolean  @default(false)
  catatanTambahan   String?
}

model Notification {
  id        Int     @id @default(autoincrement())
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int

  judul     String
  pesan     String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model KenaikanKelas {
  id            Int      @id @default(autoincrement())
  tahunAjaran   String
  tanggalProses DateTime @default(now())
  deskripsi     String?

  // Data untuk tracking kenaikan kelas
  totalSiswa Int
  sukses     Int
  gagal      Int

  createdAt DateTime @default(now())
}

// Tabel untuk menyimpan histori perubahan score siswa
model ScoreHistory {
  id        Int      @id @default(autoincrement())
  studentId Int
  pointLama Int
  pointBaru Int
  alasan    String // "Pelanggaran", "Prestasi", "Reset Kelas", etc
  tanggal   DateTime @default(now())
  createdAt DateTime @default(now())
}
