generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  superadmin
  guru
  bk
  siswa
  orangtua
}

enum Gender {
  L
  P
}

enum TipeReport {
  pelanggaran
  prestasi
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)

  student        Student?
  teacher        Teacher?
  studentReports StudentReport[]   @relation("ReportReporter")
  bkAdjustments  PointAdjustment[] @relation("BKAdjustment")
}

model Student {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int       @unique
  nisn        String    @unique
  gender      Gender
  tempatLahir String
  tglLahir    DateTime
  alamat      String
  noHp        String?
  namaOrtu    String?
  nohpOrtu    String?
  totalScore  Int       @default(0)
  isArchived  Boolean   @default(false)
  archivedAt  DateTime?
  createdAt   DateTime  @default(now())

  classroom   Classroom? @relation(fields: [classroomId], references: [id])
  classroomId Int?
  angkatan    Angkatan   @relation(fields: [angkatanId], references: [id])
  angkatanId  Int

  reports          StudentReport[]
  notifications    Notification[]
  scoreHistory     ScoreHistory[]
  suratPeringatan  SuratPeringatan[]
  pointAdjustments PointAdjustment[]
}

model Teacher {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  nip       String   @unique
  noHp      String?
  alamat    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  classrooms Classroom[] @relation("WaliKelas")
}

model Classroom {
  id          Int      @id @default(autoincrement())
  kodeKelas   String   @unique
  namaKelas   String
  waliKelas   Teacher? @relation("WaliKelas", fields: [waliKelasId], references: [id])
  waliKelasId Int?     @unique // Setiap guru hanya bisa menjadi wali kelas untuk satu kelas

  students Student[]
}

model Angkatan {
  id        Int      @id @default(autoincrement())
  tahun     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students Student[]
}

model kategori {
  id        Int          @id @default(autoincrement())
  nama      String
  tipe      TipeReport
  items     ReportItem[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model ReportItem {
  id         Int        @id @default(autoincrement())
  nama       String
  tipe       TipeReport
  kategori   kategori   @relation(fields: [kategoriId], references: [id])
  kategoriId Int
  jenis      String? // subkategori opsional, misalnya "Ringan", "Sedang", "Berat"
  point      Int
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  reports StudentReport[]
}

model StudentReport {
  id         Int     @id @default(autoincrement())
  student    Student @relation(fields: [studentId], references: [id])
  studentId  Int
  reporter   User    @relation("ReportReporter", fields: [reporterId], references: [id])
  reporterId Int
  bukti      String?

  item   ReportItem @relation(fields: [itemId], references: [id])
  itemId Int

  tahunAjaran   TahunAjaran @relation(fields: [tahunAjaranId], references: [id])
  tahunAjaranId Int

  classAtTime String? // kelas siswa saat laporan dibuat (optional agar migrasi tidak error)

  tanggal   DateTime  @default(now())
  waktu     DateTime? // waktu kejadian lebih detail
  deskripsi String?
  pointSaat Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Notification {
  id        Int     @id @default(autoincrement())
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int

  judul     String
  pesan     String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

// Model untuk sistem surat peringatan otomatis
model SuratPeringatan {
  id        Int     @id @default(autoincrement())
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int

  jenisSurat     String // "SP1", "PANGGIL_ORTU", "TERANCAM_KELUAR"
  tingkatSurat   Int // 1, 2, 3
  totalScoreSaat Int // Score siswa saat surat dibuat

  judul        String
  isiSurat     String
  statusKirim  String    @default("pending") // "pending", "sent", "failed"
  tanggalKirim DateTime?

  // Info penerima
  emailSiswa  String?
  nomorHpOrtu String?

  tahunAjaranId Int
  tahunAjaran   TahunAjaran @relation(fields: [tahunAjaranId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId, jenisSurat])
  @@index([statusKirim])
}

// Model untuk konfigurasi threshold otomatisasi
model AutomasiConfig {
  id         Int    @id @default(autoincrement())
  nama       String @unique
  threshold  Int // -100, -200, -300
  jenisSurat String // "SP1", "PANGGIL_ORTU", "TERANCAM_KELUAR"
  tingkat    Int // 1, 2, 3

  // Template surat
  judulTemplate String
  isiTemplate   String

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model KenaikanKelas {
  id            Int      @id @default(autoincrement())
  tahunAjaran   String
  tanggalProses DateTime @default(now())
  deskripsi     String?

  // Data untuk tracking kenaikan kelas
  totalSiswa Int
  sukses     Int
  gagal      Int

  createdAt DateTime @default(now())
}

// Tabel untuk menyimpan histori perubahan score siswa
// Tabel untuk tahun ajaran
model TahunAjaran {
  id             Int      @id @default(autoincrement())
  tahunAjaran    String   @unique // "2023/2024"
  tahunMulai     Int // 2023
  tahunSelesai   Int // 2024
  tanggalMulai   DateTime // 2023-07-15
  tanggalSelesai DateTime // 2024-06-30
  isActive       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relasi dengan StudentReport
  reports          StudentReport[]
  pointAdjustments PointAdjustment[]
  suratPeringatan  SuratPeringatan[]
}

// Tabel untuk menyimpan histori perubahan score siswa
model ScoreHistory {
  id        Int      @id @default(autoincrement())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  pointLama Int
  pointBaru Int
  alasan    String // "Pelanggaran", "Prestasi", "Reset Kelas", etc
  tanggal   DateTime @default(now())
  createdAt DateTime @default(now())
}

// Model untuk adjustment point oleh BK
model PointAdjustment {
  id        Int     @id @default(autoincrement())
  student   Student @relation(fields: [studentId], references: [id])
  studentId Int
  teacher   User    @relation("BKAdjustment", fields: [teacherId], references: [id])
  teacherId Int
  bukti     String?

  tahunAjaran   TahunAjaran @relation(fields: [tahunAjaranId], references: [id])
  tahunAjaranId Int

  pointPengurangan Int // jumlah point yang dikurangi (positif)
  alasan           String // alasan pengurangan point
  keterangan       String? // keterangan tambahan

  // Point siswa sebelum dan sesudah adjustment
  pointSebelum Int
  pointSesudah Int

  tanggal   DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId])
  @@index([teacherId])
  @@index([tanggal])
  @@index([tahunAjaranId])
}
